/**
 * Autogenerated by Frugal Compiler (3.9.5)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package todo_transport.v1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Objects;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import javax.annotation.Generated;
import java.util.Arrays;
import java.util.concurrent.*;


@Generated(value = "Autogenerated by Frugal Compiler (3.9.5)")
public class FTodoService {

	private static final Logger logger = LoggerFactory.getLogger(FTodoService.class);

	public interface Iface {

		public Todo createTodo(FContext ctx, Todo todo) throws TException, WError;

		public void deleteTodo(FContext ctx, String todoID) throws TException, WError;

		public java.util.List<Todo> queryTodos(FContext ctx, TodoQueryParams params) throws TException, WError;

		public Todo updateTodo(FContext ctx, Todo todo) throws TException, WError;

	}

	public static class Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		public Todo createTodo(FContext ctx, Todo todo) throws TException, WError {
			return proxy.createTodo(ctx, todo);
		}

		public void deleteTodo(FContext ctx, String todoID) throws TException, WError {
			proxy.deleteTodo(ctx, todoID);
		}

		public java.util.List<Todo> queryTodos(FContext ctx, TodoQueryParams params) throws TException, WError {
			return proxy.queryTodos(ctx, params);
		}

		public Todo updateTodo(FContext ctx, Todo todo) throws TException, WError {
			return proxy.updateTodo(ctx, todo);
		}

	}

	private static class InternalClient implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;
		public InternalClient(FServiceProvider provider) {
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		public Todo createTodo(FContext ctx, Todo todo) throws TException, WError {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("createTodo", TMessageType.CALL, 0));
			createTodo_args args = new createTodo_args();
			args.setTodo(todo);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("createTodo")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "createTodo failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "createTodo failed: invalid message type");
			}
			createTodo_result res = new createTodo_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.err != null) {
				throw res.err;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "createTodo failed: unknown result");
		}
		public void deleteTodo(FContext ctx, String todoID) throws TException, WError {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("deleteTodo", TMessageType.CALL, 0));
			deleteTodo_args args = new deleteTodo_args();
			args.setTodoID(todoID);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("deleteTodo")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "deleteTodo failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "deleteTodo failed: invalid message type");
			}
			deleteTodo_result res = new deleteTodo_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.err != null) {
				throw res.err;
			}
		}
		public java.util.List<Todo> queryTodos(FContext ctx, TodoQueryParams params) throws TException, WError {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("queryTodos", TMessageType.CALL, 0));
			queryTodos_args args = new queryTodos_args();
			args.setParams(params);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("queryTodos")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "queryTodos failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "queryTodos failed: invalid message type");
			}
			queryTodos_result res = new queryTodos_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.err != null) {
				throw res.err;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "queryTodos failed: unknown result");
		}
		public Todo updateTodo(FContext ctx, Todo todo) throws TException, WError {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("updateTodo", TMessageType.CALL, 0));
			updateTodo_args args = new updateTodo_args();
			args.setTodo(todo);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("updateTodo")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "updateTodo failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "updateTodo failed: invalid message type");
			}
			updateTodo_result res = new updateTodo_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.err != null) {
				throw res.err;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "updateTodo failed: unknown result");
		}
	}

	public static class Processor extends FBaseProcessor implements FProcessor {

		private Iface handler;

		public Processor(Iface iface, ServiceMiddleware... middleware) {
			handler = InvocationHandler.composeMiddleware(iface, Iface.class, middleware);
		}

		protected java.util.Map<String, FProcessorFunction> getProcessMap() {
			java.util.Map<String, FProcessorFunction> processMap = new java.util.HashMap<>();
			processMap.put("createTodo", new CreateTodo());
			processMap.put("deleteTodo", new DeleteTodo());
			processMap.put("queryTodos", new QueryTodos());
			processMap.put("updateTodo", new UpdateTodo());
			return processMap;
		}

		protected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
			java.util.Map<String, java.util.Map<String, String>> annotationsMap = new java.util.HashMap<>();
			return annotationsMap;
		}

		@Override
		public void addMiddleware(ServiceMiddleware middleware) {
			handler = InvocationHandler.composeMiddleware(handler, Iface.class, new ServiceMiddleware[]{middleware});
		}

		private class CreateTodo implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				createTodo_args args = new createTodo_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "createTodo", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				createTodo_result result = new createTodo_result();
				try {
					result.success = handler.createTodo(ctx, args.todo);
					result.setSuccessIsSet(true);
				} catch (WError err) {
					result.err = err;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("createTodo", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "createTodo", "Internal error processing createTodo: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("createTodo", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							throw (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "createTodo", "response too large: " + e.getMessage()).initCause(e);
						}
						throw e;
					}
				}
			}
		}

		private class DeleteTodo implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				deleteTodo_args args = new deleteTodo_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "deleteTodo", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				deleteTodo_result result = new deleteTodo_result();
				try {
					handler.deleteTodo(ctx, args.todoID);
				} catch (WError err) {
					result.err = err;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("deleteTodo", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "deleteTodo", "Internal error processing deleteTodo: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("deleteTodo", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							throw (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "deleteTodo", "response too large: " + e.getMessage()).initCause(e);
						}
						throw e;
					}
				}
			}
		}

		private class QueryTodos implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				queryTodos_args args = new queryTodos_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "queryTodos", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				queryTodos_result result = new queryTodos_result();
				try {
					result.success = handler.queryTodos(ctx, args.params);
					result.setSuccessIsSet(true);
				} catch (WError err) {
					result.err = err;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("queryTodos", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "queryTodos", "Internal error processing queryTodos: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("queryTodos", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							throw (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "queryTodos", "response too large: " + e.getMessage()).initCause(e);
						}
						throw e;
					}
				}
			}
		}

		private class UpdateTodo implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				updateTodo_args args = new updateTodo_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "updateTodo", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				updateTodo_result result = new updateTodo_result();
				try {
					result.success = handler.updateTodo(ctx, args.todo);
					result.setSuccessIsSet(true);
				} catch (WError err) {
					result.err = err;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("updateTodo", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "updateTodo", "Internal error processing updateTodo: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("updateTodo", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							throw (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "updateTodo", "response too large: " + e.getMessage()).initCause(e);
						}
						throw e;
					}
				}
			}
		}

	}

	public static class createTodo_args implements org.apache.thrift.TBase<createTodo_args, createTodo_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTodo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTodo_args");

		private static final org.apache.thrift.protocol.TField TODO_FIELD_DESC = new org.apache.thrift.protocol.TField("todo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public Todo todo;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TODO((short)1, "todo")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // TODO
						return TODO;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public createTodo_args() {
		}

		public createTodo_args(
			Todo todo) {
			this();
			this.todo = todo;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createTodo_args(createTodo_args other) {
			if (other.isSetTodo()) {
				this.todo = new Todo(other.todo);
			}
		}

		public createTodo_args deepCopy() {
			return new createTodo_args(this);
		}

		@Override
		public void clear() {
			this.todo = null;

		}

		public Todo getTodo() {
			return this.todo;
		}

		public createTodo_args setTodo(Todo todo) {
			this.todo = todo;
			return this;
		}

		public void unsetTodo() {
			this.todo = null;
		}

		/** Returns true if field todo is set (has been assigned a value) and false otherwise */
		public boolean isSetTodo() {
			return this.todo != null;
		}

		public void setTodoIsSet(boolean value) {
			if (!value) {
				this.todo = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TODO:
				if (value == null) {
					unsetTodo();
				} else {
					setTodo((Todo)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TODO:
				return getTodo();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TODO:
				return isSetTodo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createTodo_args)
				return this.equals((createTodo_args)that);
			return false;
		}

		public boolean equals(createTodo_args that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.todo, that.todo))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_todo = true && (isSetTodo());
			list.add(present_todo);
			if (present_todo)
				list.add(todo);

			return list.hashCode();
		}

		@Override
		public int compareTo(createTodo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetTodo(), other.isSetTodo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTodo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todo, other.todo);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new createTodo_argsStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new createTodo_argsStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createTodo_args(");
			boolean first = true;

			sb.append("todo:");
			sb.append(this.todo);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (todo != null) {
				todo.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createTodo_argsStandardScheme extends StandardScheme<createTodo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createTodo_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // TODO
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.todo = new Todo();
								struct.todo.read(iprot);
								struct.setTodoIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createTodo_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetTodo()) {
					oprot.writeFieldBegin(TODO_FIELD_DESC);
					struct.todo.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class createTodo_result implements org.apache.thrift.TBase<createTodo_result, createTodo_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTodo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTodo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public Todo success;
		public WError err;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success"),
			ERR((short)1, "err")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // ERR
						return ERR;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public createTodo_result() {
		}

		public createTodo_result(
			Todo success,
			WError err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createTodo_result(createTodo_result other) {
			if (other.isSetSuccess()) {
				this.success = new Todo(other.success);
			}
			if (other.isSetErr()) {
				this.err = new WError(other.err);
			}
		}

		public createTodo_result deepCopy() {
			return new createTodo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

			this.err = null;

		}

		public Todo getSuccess() {
			return this.success;
		}

		public createTodo_result setSuccess(Todo success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public WError getErr() {
			return this.err;
		}

		public createTodo_result setErr(WError err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/** Returns true if field err is set (has been assigned a value) and false otherwise */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Todo)value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				} else {
					setErr((WError)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createTodo_result)
				return this.equals((createTodo_result)that);
			return false;
		}

		public boolean equals(createTodo_result that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.success, that.success))
				return false;
			if (!Objects.equals(this.err, that.err))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_err = true && (isSetErr());
			list.add(present_err);
			if (present_err)
				list.add(err);

			return list.hashCode();
		}

		@Override
		public int compareTo(createTodo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.compare(isSetErr(), other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new createTodo_resultStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new createTodo_resultStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createTodo_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first) sb.append(", ");
			sb.append("err:");
			sb.append(this.err);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
			if (err != null) {
				err.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createTodo_resultStandardScheme extends StandardScheme<createTodo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createTodo_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new Todo();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // ERR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.err = new WError();
								struct.err.read(iprot);
								struct.setErrIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createTodo_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.isSetErr()) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class deleteTodo_args implements org.apache.thrift.TBase<deleteTodo_args, deleteTodo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTodo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTodo_args");

		private static final org.apache.thrift.protocol.TField TODO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("todoID", org.apache.thrift.protocol.TType.STRING, (short)1);

		public String todoID;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TODO_ID((short)1, "todoID")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // TODO_ID
						return TODO_ID;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public deleteTodo_args() {
		}

		public deleteTodo_args(
			String todoID) {
			this();
			this.todoID = todoID;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteTodo_args(deleteTodo_args other) {
			if (other.isSetTodoID()) {
				this.todoID = other.todoID;
			}
		}

		public deleteTodo_args deepCopy() {
			return new deleteTodo_args(this);
		}

		@Override
		public void clear() {
			this.todoID = null;

		}

		public String getTodoID() {
			return this.todoID;
		}

		public deleteTodo_args setTodoID(String todoID) {
			this.todoID = todoID;
			return this;
		}

		public void unsetTodoID() {
			this.todoID = null;
		}

		/** Returns true if field todoID is set (has been assigned a value) and false otherwise */
		public boolean isSetTodoID() {
			return this.todoID != null;
		}

		public void setTodoIDIsSet(boolean value) {
			if (!value) {
				this.todoID = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TODO_ID:
				if (value == null) {
					unsetTodoID();
				} else {
					setTodoID((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TODO_ID:
				return getTodoID();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TODO_ID:
				return isSetTodoID();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteTodo_args)
				return this.equals((deleteTodo_args)that);
			return false;
		}

		public boolean equals(deleteTodo_args that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.todoID, that.todoID))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_todoID = true && (isSetTodoID());
			list.add(present_todoID);
			if (present_todoID)
				list.add(todoID);

			return list.hashCode();
		}

		@Override
		public int compareTo(deleteTodo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetTodoID(), other.isSetTodoID());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTodoID()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todoID, other.todoID);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new deleteTodo_argsStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new deleteTodo_argsStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteTodo_args(");
			boolean first = true;

			sb.append("todoID:");
			sb.append(this.todoID);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteTodo_argsStandardScheme extends StandardScheme<deleteTodo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTodo_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // TODO_ID
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.todoID = iprot.readString();
								struct.setTodoIDIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTodo_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetTodoID()) {
					oprot.writeFieldBegin(TODO_ID_FIELD_DESC);
					String elem14 = struct.todoID;
					oprot.writeString(elem14);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class deleteTodo_result implements org.apache.thrift.TBase<deleteTodo_result, deleteTodo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTodo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTodo_result");

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public WError err;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ERR((short)1, "err")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // ERR
						return ERR;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public deleteTodo_result() {
		}

		public deleteTodo_result(
			WError err) {
			this();
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteTodo_result(deleteTodo_result other) {
			if (other.isSetErr()) {
				this.err = new WError(other.err);
			}
		}

		public deleteTodo_result deepCopy() {
			return new deleteTodo_result(this);
		}

		@Override
		public void clear() {
			this.err = null;

		}

		public WError getErr() {
			return this.err;
		}

		public deleteTodo_result setErr(WError err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/** Returns true if field err is set (has been assigned a value) and false otherwise */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ERR:
				if (value == null) {
					unsetErr();
				} else {
					setErr((WError)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ERR:
				return getErr();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ERR:
				return isSetErr();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteTodo_result)
				return this.equals((deleteTodo_result)that);
			return false;
		}

		public boolean equals(deleteTodo_result that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.err, that.err))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_err = true && (isSetErr());
			list.add(present_err);
			if (present_err)
				list.add(err);

			return list.hashCode();
		}

		@Override
		public int compareTo(deleteTodo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetErr(), other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new deleteTodo_resultStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new deleteTodo_resultStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteTodo_result(");
			boolean first = true;

			sb.append("err:");
			sb.append(this.err);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (err != null) {
				err.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteTodo_resultStandardScheme extends StandardScheme<deleteTodo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTodo_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // ERR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.err = new WError();
								struct.err.read(iprot);
								struct.setErrIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTodo_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetErr()) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class queryTodos_args implements org.apache.thrift.TBase<queryTodos_args, queryTodos_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTodos_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTodos_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public TodoQueryParams params;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short)1, "params")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // PARAMS
						return PARAMS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public queryTodos_args() {
		}

		public queryTodos_args(
			TodoQueryParams params) {
			this();
			this.params = params;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public queryTodos_args(queryTodos_args other) {
			if (other.isSetParams()) {
				this.params = new TodoQueryParams(other.params);
			}
		}

		public queryTodos_args deepCopy() {
			return new queryTodos_args(this);
		}

		@Override
		public void clear() {
			this.params = null;

		}

		public TodoQueryParams getParams() {
			return this.params;
		}

		public queryTodos_args setParams(TodoQueryParams params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/** Returns true if field params is set (has been assigned a value) and false otherwise */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((TodoQueryParams)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof queryTodos_args)
				return this.equals((queryTodos_args)that);
			return false;
		}

		public boolean equals(queryTodos_args that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.params, that.params))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			return list.hashCode();
		}

		@Override
		public int compareTo(queryTodos_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetParams(), other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new queryTodos_argsStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new queryTodos_argsStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("queryTodos_args(");
			boolean first = true;

			sb.append("params:");
			sb.append(this.params);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class queryTodos_argsStandardScheme extends StandardScheme<queryTodos_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, queryTodos_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // PARAMS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.params = new TodoQueryParams();
								struct.params.read(iprot);
								struct.setParamsIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, queryTodos_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetParams()) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class queryTodos_result implements org.apache.thrift.TBase<queryTodos_result, queryTodos_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTodos_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTodos_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public java.util.List<Todo> success;
		public WError err;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success"),
			ERR((short)1, "err")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // ERR
						return ERR;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public queryTodos_result() {
		}

		public queryTodos_result(
			java.util.List<Todo> success,
			WError err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public queryTodos_result(queryTodos_result other) {
			if (other.isSetSuccess()) {
				this.success = new ArrayList<Todo>(other.success.size());
				for (Todo elem15 : other.success) {
					Todo elem16 = new Todo(elem15);
					this.success.add(elem16);
				}
			}
			if (other.isSetErr()) {
				this.err = new WError(other.err);
			}
		}

		public queryTodos_result deepCopy() {
			return new queryTodos_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

			this.err = null;

		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<Todo> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(Todo elem) {
			if (this.success == null) {
				this.success = new ArrayList<Todo>();
			}
			this.success.add(elem);
		}

		public java.util.List<Todo> getSuccess() {
			return this.success;
		}

		public queryTodos_result setSuccess(java.util.List<Todo> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public WError getErr() {
			return this.err;
		}

		public queryTodos_result setErr(WError err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/** Returns true if field err is set (has been assigned a value) and false otherwise */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.util.List<Todo>)value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				} else {
					setErr((WError)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof queryTodos_result)
				return this.equals((queryTodos_result)that);
			return false;
		}

		public boolean equals(queryTodos_result that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.success, that.success))
				return false;
			if (!Objects.equals(this.err, that.err))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_err = true && (isSetErr());
			list.add(present_err);
			if (present_err)
				list.add(err);

			return list.hashCode();
		}

		@Override
		public int compareTo(queryTodos_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.compare(isSetErr(), other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new queryTodos_resultStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new queryTodos_resultStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("queryTodos_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first) sb.append(", ");
			sb.append("err:");
			sb.append(this.err);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (err != null) {
				err.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class queryTodos_resultStandardScheme extends StandardScheme<queryTodos_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, queryTodos_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
								org.apache.thrift.protocol.TList elem17 = iprot.readListBegin();
								struct.success = new ArrayList<Todo>(elem17.size);
								for (int elem18 = 0; elem18 < elem17.size; ++elem18) {
									Todo elem19 = new Todo();
									elem19.read(iprot);
									struct.success.add(elem19);
								}
								iprot.readListEnd();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // ERR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.err = new WError();
								struct.err.read(iprot);
								struct.setErrIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, queryTodos_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
					for (Todo elem20 : struct.success) {
						elem20.write(oprot);
					}
					oprot.writeListEnd();
					oprot.writeFieldEnd();
				}
				if (struct.isSetErr()) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class updateTodo_args implements org.apache.thrift.TBase<updateTodo_args, updateTodo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTodo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTodo_args");

		private static final org.apache.thrift.protocol.TField TODO_FIELD_DESC = new org.apache.thrift.protocol.TField("todo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public Todo todo;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TODO((short)1, "todo")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // TODO
						return TODO;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public updateTodo_args() {
		}

		public updateTodo_args(
			Todo todo) {
			this();
			this.todo = todo;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateTodo_args(updateTodo_args other) {
			if (other.isSetTodo()) {
				this.todo = new Todo(other.todo);
			}
		}

		public updateTodo_args deepCopy() {
			return new updateTodo_args(this);
		}

		@Override
		public void clear() {
			this.todo = null;

		}

		public Todo getTodo() {
			return this.todo;
		}

		public updateTodo_args setTodo(Todo todo) {
			this.todo = todo;
			return this;
		}

		public void unsetTodo() {
			this.todo = null;
		}

		/** Returns true if field todo is set (has been assigned a value) and false otherwise */
		public boolean isSetTodo() {
			return this.todo != null;
		}

		public void setTodoIsSet(boolean value) {
			if (!value) {
				this.todo = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TODO:
				if (value == null) {
					unsetTodo();
				} else {
					setTodo((Todo)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TODO:
				return getTodo();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TODO:
				return isSetTodo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateTodo_args)
				return this.equals((updateTodo_args)that);
			return false;
		}

		public boolean equals(updateTodo_args that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.todo, that.todo))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_todo = true && (isSetTodo());
			list.add(present_todo);
			if (present_todo)
				list.add(todo);

			return list.hashCode();
		}

		@Override
		public int compareTo(updateTodo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetTodo(), other.isSetTodo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTodo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todo, other.todo);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new updateTodo_argsStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new updateTodo_argsStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateTodo_args(");
			boolean first = true;

			sb.append("todo:");
			sb.append(this.todo);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (todo != null) {
				todo.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateTodo_argsStandardScheme extends StandardScheme<updateTodo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, updateTodo_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // TODO
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.todo = new Todo();
								struct.todo.read(iprot);
								struct.setTodoIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, updateTodo_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetTodo()) {
					oprot.writeFieldBegin(TODO_FIELD_DESC);
					struct.todo.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

	public static class updateTodo_result implements org.apache.thrift.TBase<updateTodo_result, updateTodo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTodo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTodo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		public Todo success;
		public WError err;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success"),
			ERR((short)1, "err")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // ERR
						return ERR;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public updateTodo_result() {
		}

		public updateTodo_result(
			Todo success,
			WError err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateTodo_result(updateTodo_result other) {
			if (other.isSetSuccess()) {
				this.success = new Todo(other.success);
			}
			if (other.isSetErr()) {
				this.err = new WError(other.err);
			}
		}

		public updateTodo_result deepCopy() {
			return new updateTodo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

			this.err = null;

		}

		public Todo getSuccess() {
			return this.success;
		}

		public updateTodo_result setSuccess(Todo success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public WError getErr() {
			return this.err;
		}

		public updateTodo_result setErr(WError err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/** Returns true if field err is set (has been assigned a value) and false otherwise */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Todo)value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				} else {
					setErr((WError)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateTodo_result)
				return this.equals((updateTodo_result)that);
			return false;
		}

		public boolean equals(updateTodo_result that) {
			if (that == null)
				return false;
			if (!Objects.equals(this.success, that.success))
				return false;
			if (!Objects.equals(this.err, that.err))
				return false;
			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_err = true && (isSetErr());
			list.add(present_err);
			if (present_err)
				list.add(err);

			return list.hashCode();
		}

		@Override
		public int compareTo(updateTodo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.compare(isSetErr(), other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			if (iprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new updateTodo_resultStandardScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			if (oprot.getScheme() != StandardScheme.class) {
				throw new UnsupportedOperationException();
			}
			new updateTodo_resultStandardScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateTodo_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first) sb.append(", ");
			sb.append("err:");
			sb.append(this.err);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
			if (err != null) {
				err.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateTodo_resultStandardScheme extends StandardScheme<updateTodo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, updateTodo_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new Todo();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // ERR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.err = new WError();
								struct.err.read(iprot);
								struct.setErrIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, updateTodo_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.isSetErr()) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

	}

}