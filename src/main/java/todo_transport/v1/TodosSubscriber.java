/**
 * Autogenerated by Frugal Compiler (3.9.5)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package todo_transport.v1;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FScopeProvider;
import com.workiva.frugal.transport.FPublisherTransport;
import com.workiva.frugal.transport.FSubscriberTransport;
import com.workiva.frugal.transport.FSubscription;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TException;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import org.apache.thrift.protocol.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.Generated;




@Generated(value = "Autogenerated by Frugal Compiler (3.9.5)")
public class TodosSubscriber {

	public interface Iface {
		public FSubscription subscribeTodoCreated(String account, String membership, final TodoCreatedHandler handler) throws TException;

		public FSubscription subscribeTodoDeleted(String account, String membership, final TodoDeletedHandler handler) throws TException;

		public FSubscription subscribeTodoUpdated(String account, String membership, final TodoUpdatedHandler handler) throws TException;

	}

	public interface IfaceThrowable {
		public FSubscription subscribeTodoCreatedThrowable(String account, String membership, final TodoCreatedThrowableHandler handler) throws TException;

		public FSubscription subscribeTodoDeletedThrowable(String account, String membership, final TodoDeletedThrowableHandler handler) throws TException;

		public FSubscription subscribeTodoUpdatedThrowable(String account, String membership, final TodoUpdatedThrowableHandler handler) throws TException;

	}

	public interface TodoCreatedHandler {
		void onTodoCreated(FContext ctx, Todo req) throws TException;
	}

	public interface TodoDeletedHandler {
		void onTodoDeleted(FContext ctx, Todo req) throws TException;
	}

	public interface TodoUpdatedHandler {
		void onTodoUpdated(FContext ctx, Todo req) throws TException;
	}

	public interface TodoCreatedThrowableHandler {
		void onTodoCreated(FContext ctx, Todo req) throws TException;
	}

	public interface TodoDeletedThrowableHandler {
		void onTodoDeleted(FContext ctx, Todo req) throws TException;
	}

	public interface TodoUpdatedThrowableHandler {
		void onTodoUpdated(FContext ctx, Todo req) throws TException;
	}

	public static class Client implements Iface, IfaceThrowable {
		private static final String DELIMITER = ".";
		private static final Logger LOGGER = LoggerFactory.getLogger(Client.class);

		private final FScopeProvider provider;
		private final ServiceMiddleware[] middleware;

		public Client(FScopeProvider provider, ServiceMiddleware... middleware) {
			this.provider = provider;
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			this.middleware = combined.toArray(new ServiceMiddleware[0]);
		}

		public FSubscription subscribeTodoCreated(String account, String membership, final TodoCreatedHandler handler) throws TException {
			final String op = "TodoCreated";
			String prefix = String.format("%s.%s.", account, membership);
			final String topic = String.format("%sTodos%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final TodoCreatedHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, TodoCreatedHandler.class, middleware);
			transport.subscribe(topic, recvTodoCreated(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvTodoCreated(String op, FProtocolFactory pf, TodoCreatedHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Todo received = new Todo();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onTodoCreated(ctx, received);
				}
			};
		}

		public FSubscription subscribeTodoDeleted(String account, String membership, final TodoDeletedHandler handler) throws TException {
			final String op = "TodoDeleted";
			String prefix = String.format("%s.%s.", account, membership);
			final String topic = String.format("%sTodos%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final TodoDeletedHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, TodoDeletedHandler.class, middleware);
			transport.subscribe(topic, recvTodoDeleted(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvTodoDeleted(String op, FProtocolFactory pf, TodoDeletedHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Todo received = new Todo();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onTodoDeleted(ctx, received);
				}
			};
		}

		public FSubscription subscribeTodoUpdated(String account, String membership, final TodoUpdatedHandler handler) throws TException {
			final String op = "TodoUpdated";
			String prefix = String.format("%s.%s.", account, membership);
			final String topic = String.format("%sTodos%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final TodoUpdatedHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, TodoUpdatedHandler.class, middleware);
			transport.subscribe(topic, recvTodoUpdated(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvTodoUpdated(String op, FProtocolFactory pf, TodoUpdatedHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Todo received = new Todo();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onTodoUpdated(ctx, received);
				}
			};
		}

		public FSubscription subscribeTodoCreatedThrowable(String account, String membership, final TodoCreatedThrowableHandler handler) throws TException {
			final String op = "TodoCreated";
			String prefix = String.format("%s.%s.", account, membership);
			final String topic = String.format("%sTodos%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final TodoCreatedThrowableHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, TodoCreatedThrowableHandler.class, middleware);
			transport.subscribe(topic, recvTodoCreated(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvTodoCreated(String op, FProtocolFactory pf, TodoCreatedThrowableHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Todo received = new Todo();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onTodoCreated(ctx, received);
				}
			};
		}

		public FSubscription subscribeTodoDeletedThrowable(String account, String membership, final TodoDeletedThrowableHandler handler) throws TException {
			final String op = "TodoDeleted";
			String prefix = String.format("%s.%s.", account, membership);
			final String topic = String.format("%sTodos%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final TodoDeletedThrowableHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, TodoDeletedThrowableHandler.class, middleware);
			transport.subscribe(topic, recvTodoDeleted(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvTodoDeleted(String op, FProtocolFactory pf, TodoDeletedThrowableHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Todo received = new Todo();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onTodoDeleted(ctx, received);
				}
			};
		}

		public FSubscription subscribeTodoUpdatedThrowable(String account, String membership, final TodoUpdatedThrowableHandler handler) throws TException {
			final String op = "TodoUpdated";
			String prefix = String.format("%s.%s.", account, membership);
			final String topic = String.format("%sTodos%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final TodoUpdatedThrowableHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, TodoUpdatedThrowableHandler.class, middleware);
			transport.subscribe(topic, recvTodoUpdated(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvTodoUpdated(String op, FProtocolFactory pf, TodoUpdatedThrowableHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Todo received = new Todo();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onTodoUpdated(ctx, received);
				}
			};
		}
	}

}
